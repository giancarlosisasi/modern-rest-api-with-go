// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository\session_repository.go
//
// Generated by this command:
//
//	mockgen -source .\repository\session_repository.go -package repository -destination repository/session_repository_mock.go
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	db_queries "shopping/database/queries"

	gomock "go.uber.org/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
	isgomock struct{}
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockSessionRepository) AddSession(username string) (*db_queries.AddSessionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", username)
	ret0, _ := ret[0].(*db_queries.AddSessionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSession indicates an expected call of AddSession.
func (mr *MockSessionRepositoryMockRecorder) AddSession(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockSessionRepository)(nil).AddSession), username)
}

// GetSessionByToken mocks base method.
func (m *MockSessionRepository) GetSessionByToken(token string) (*db_queries.GetSessionByTokenRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByToken", token)
	ret0, _ := ret[0].(*db_queries.GetSessionByTokenRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByToken indicates an expected call of GetSessionByToken.
func (mr *MockSessionRepositoryMockRecorder) GetSessionByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByToken", reflect.TypeOf((*MockSessionRepository)(nil).GetSessionByToken), token)
}

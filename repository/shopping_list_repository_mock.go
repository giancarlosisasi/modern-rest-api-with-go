// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository\shopping_list_repository.go
//
// Generated by this command:
//
//	mockgen -source .\repository\shopping_list_repository.go -package repository -destination repository/shopping_list_repository_mock.go
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	db_queries "shopping/database/queries"

	gomock "go.uber.org/mock/gomock"
)

// MockShoppingListRepository is a mock of ShoppingListRepository interface.
type MockShoppingListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingListRepositoryMockRecorder
	isgomock struct{}
}

// MockShoppingListRepositoryMockRecorder is the mock recorder for MockShoppingListRepository.
type MockShoppingListRepositoryMockRecorder struct {
	mock *MockShoppingListRepository
}

// NewMockShoppingListRepository creates a new mock instance.
func NewMockShoppingListRepository(ctrl *gomock.Controller) *MockShoppingListRepository {
	mock := &MockShoppingListRepository{ctrl: ctrl}
	mock.recorder = &MockShoppingListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingListRepository) EXPECT() *MockShoppingListRepositoryMockRecorder {
	return m.recorder
}

// CreateShoppingList mocks base method.
func (m *MockShoppingListRepository) CreateShoppingList(name string, items []string) (*db_queries.ShoppingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingList", name, items)
	ret0, _ := ret[0].(*db_queries.ShoppingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShoppingList indicates an expected call of CreateShoppingList.
func (mr *MockShoppingListRepositoryMockRecorder) CreateShoppingList(name, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingList", reflect.TypeOf((*MockShoppingListRepository)(nil).CreateShoppingList), name, items)
}

// DeleteShoppingListByID mocks base method.
func (m *MockShoppingListRepository) DeleteShoppingListByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShoppingListByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShoppingListByID indicates an expected call of DeleteShoppingListByID.
func (mr *MockShoppingListRepositoryMockRecorder) DeleteShoppingListByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShoppingListByID", reflect.TypeOf((*MockShoppingListRepository)(nil).DeleteShoppingListByID), id)
}

// GetAllShoppingLists mocks base method.
func (m *MockShoppingListRepository) GetAllShoppingLists() (*[]db_queries.ShoppingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllShoppingLists")
	ret0, _ := ret[0].(*[]db_queries.ShoppingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllShoppingLists indicates an expected call of GetAllShoppingLists.
func (mr *MockShoppingListRepositoryMockRecorder) GetAllShoppingLists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllShoppingLists", reflect.TypeOf((*MockShoppingListRepository)(nil).GetAllShoppingLists))
}

// GetShoppingListByID mocks base method.
func (m *MockShoppingListRepository) GetShoppingListByID(id string) (*db_queries.ShoppingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingListByID", id)
	ret0, _ := ret[0].(*db_queries.ShoppingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingListByID indicates an expected call of GetShoppingListByID.
func (mr *MockShoppingListRepositoryMockRecorder) GetShoppingListByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingListByID", reflect.TypeOf((*MockShoppingListRepository)(nil).GetShoppingListByID), id)
}

// PartialUpdate mocks base method.
func (m *MockShoppingListRepository) PartialUpdate(id string, name *string, items *[]string) (*db_queries.ShoppingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdate", id, name, items)
	ret0, _ := ret[0].(*db_queries.ShoppingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialUpdate indicates an expected call of PartialUpdate.
func (mr *MockShoppingListRepositoryMockRecorder) PartialUpdate(id, name, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdate", reflect.TypeOf((*MockShoppingListRepository)(nil).PartialUpdate), id, name, items)
}

// PushItemToShoppingList mocks base method.
func (m *MockShoppingListRepository) PushItemToShoppingList(id, item string) (*db_queries.ShoppingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushItemToShoppingList", id, item)
	ret0, _ := ret[0].(*db_queries.ShoppingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushItemToShoppingList indicates an expected call of PushItemToShoppingList.
func (mr *MockShoppingListRepositoryMockRecorder) PushItemToShoppingList(id, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushItemToShoppingList", reflect.TypeOf((*MockShoppingListRepository)(nil).PushItemToShoppingList), id, item)
}

// UpdateShoppingListByID mocks base method.
func (m *MockShoppingListRepository) UpdateShoppingListByID(id, name string, items []string) (*db_queries.ShoppingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShoppingListByID", id, name, items)
	ret0, _ := ret[0].(*db_queries.ShoppingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShoppingListByID indicates an expected call of UpdateShoppingListByID.
func (mr *MockShoppingListRepositoryMockRecorder) UpdateShoppingListByID(id, name, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShoppingListByID", reflect.TypeOf((*MockShoppingListRepository)(nil).UpdateShoppingListByID), id, name, items)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package db_queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSession = `-- name: AddSession :one
INSERT INTO sessions (token, username, expires_at)
VALUES ($1, $2, $3)
RETURNING id, token, username, expires_at, created_at, updated_at
`

type AddSessionParams struct {
	Token     string
	Username  string
	ExpiresAt pgtype.Timestamptz
}

type AddSessionRow struct {
	ID        pgtype.UUID
	Token     string
	Username  string
	ExpiresAt pgtype.Timestamptz
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) AddSession(ctx context.Context, arg AddSessionParams) (AddSessionRow, error) {
	row := q.db.QueryRow(ctx, addSession, arg.Token, arg.Username, arg.ExpiresAt)
	var i AddSessionRow
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Username,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions WHERE token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteSessionByToken, token)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, token, username, expires_at, created_at, updated_at
FROM sessions WHERE token = $1
`

type GetSessionByTokenRow struct {
	ID        pgtype.UUID
	Token     string
	Username  string
	ExpiresAt pgtype.Timestamptz
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (GetSessionByTokenRow, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Username,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
